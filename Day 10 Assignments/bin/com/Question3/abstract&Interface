Q 1.) Explain abstract class and interface with an example ?

Abstract class --> 1.) Abstract class can have abstract and non-abstract methods.
			       2.) Abstract class does not support multiple inheritance.
			       3.) Abstract class can have final, non-final, static and non-static method.
			       4.) Abstract class can provide the implementation of interface.
			       5.) The abstract keyword is used to declare abstract class.
			       6.) An abstract class can extend another java class and implement multiple java interfaces.
			       7.) An abstract class can be extended using keyword "extends".
			       8.) A Java abstract class can have class members like private, protected, etc.
			       
Interface --> 1.) Interface can have only abstract methods. Since Java 8, it can have default and static methods also.
			  2.) Interface supports multiple inheritance.
			  3.) Interface has only static and final variables.
			  4.) Interface can't provide the implementation of abstract class.
			  5.) The interface keyword is used to declare interface.
			  6.) An interface can extend another Java interface only.
			  7.) An interface can be implemented using keyword "implements".
			  8.) Members of a Java interface are public by default.
			  
Example --> for both abstract class and interface.
  
//Creating interface that has 4 methods  
interface A{  
		
		void a();
		void b();  
		void c();  
		void d();  
}  
  
//Creating abstract class that provides the implementation of one method of A interface 
 
abstract class B implements A{  

	public void c(){System.out.println("I am C");}  

}  
  
//Creating subclass of abstract class, now we need to provide the implementation of rest of the methods  

class M extends B{  

	public void a(){System.out.println("I am a");}  
	public void b(){System.out.println("I am b");}  
	public void d(){System.out.println("I am d");}  
	
}  
  
//Creating a test class that calls the methods of A interface  

class Test5{  
	
	public static void main(String args[]){  
	
		A a=new M();  
	
		a.a();  
		a.b();  
		a.c();  
		a.d();  
	}
}    